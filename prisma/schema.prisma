// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String     @default(uuid()) @id
  phone String  @unique
  email String?  @unique
  firstName String?  @map("first_name")
  lastName String?   @map("last_name")
  postalCode String? @map("postal_code")  
  stripeCustomerId String? @map("stripe_customer_id")  
  imageUrl String? @map("image_url") 
  imageKey String? @map("image_key")  
  role Role    @default(USER) 
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at") 

  hosts BuyingTeam[]
  reviews Review[]
  teams TeamMember[] 
  requests TeamRequest[] 
  myFollowers Follower[] @relation("myFollowers")
  followings  Follower[] @relation("followings")
  likes Like[]
  payments Payment[]
  notifications Notification[]
  recentlyViewed RecentlyViewed[]
  shipping Shipping?
  producer Producer?
  baskets Basket[] 
  invites Invite[] 

  @@map("users")
}

model Producer {
  id  String     @default(uuid()) @id
  userId String @unique
  imageUrl String? @map("image_url") 
  imageKey String? @map("image_key")  
  businessName String @map("business_name")
  businessAddress String @map("business_address")
  minimumTreshold Int @map("minimum_treshold") @default(5000)
  website String?
  description String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at") 

  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)  
  products Product[]
  buyingteams BuyingTeam[]
  reviews Review[]
  likes Like[]
  recentlyViewed RecentlyViewed[]

  @@map("producers")
}

model Shipping {
  id  String    @default(uuid()) @id
  userId String @unique
  buildingNo String? @map("building_no") 
  address String
  city  String? 
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at") 

  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)  

  @@map("shippings")
}

model Product {
  id  String     @default(uuid()) @id  
  name String
  imageUrl String? @map("image_url") 
  imageKey String? @map("image_key")  
  description String?
  producerId String @map("producer_id")
  price Int
  status ProductStatus   @default(IN_STOCK)   
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at") 

  producer  Producer       @relation(fields: [producerId], references: [id])  
  reviews  Review[]
  likes Like[]
  basket Basket[]
  recentlyViewed RecentlyViewed[]

  @@map("products")
}

model BuyingTeam {
  id  String     @default(uuid()) @id 
  name String 
  postalCode String @map("postal_code")
  producerId String @map("producer_id")
  hostId String    @map("host_id")
  frequency String 
  description String?
  isPublic Boolean? @default(true) @map("is_public")
  imageUrl String? @map("image_url")  
  imageKey String? @map("image_key")  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at") 

  producer  Producer  @relation(fields: [producerId], references: [id]) 
  host User  @relation(fields: [hostId], references: [id])
  members TeamMember[]
  requests TeamRequest[]
  likes Like[]
  invites Invite[]
  orders Order[]
  notifications Notification[]
  recentlyViewed RecentlyViewed[]

  @@map("buying_teams")
}

model Review {
  id  String     @default(uuid()) @id 
  text String
  reviewerId String  @map("reviewer_id")
  producerId String?  @map("producer_id")
  productId String?  @map("product_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at") 

  reviewer User  @relation(fields: [reviewerId], references: [id])
  producer  Producer?  @relation(fields: [producerId], references: [id]) 
  product Product?  @relation(fields: [productId], references: [id])  

  @@map("reviews")
}

model TeamMember {
  id  String     @default(uuid()) @id 
  teamId String  @map("team_id")
  userId String  @map("user_id")
  status TeamStatus 
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at") 

  team BuyingTeam  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade) 

  @@map("team_members")
}

model TeamRequest {
  id  String     @default(uuid()) @id 
  teamId String  @map("team_id")
  userId String  @map("user_id")
  status TeamStatus @default(PENDING)  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at") 

  team BuyingTeam  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade) 

  @@map("team_requests")
}

model Follower {
  id  String     @default(uuid()) @id 
  userId String  @map("user_id")
  followerId String  @map("follower_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at") 

  user User  @relation("myFollowers", fields: [userId], references: [id], onDelete: Cascade) 
  follower User  @relation("followings", fields: [followerId], references: [id])

  @@map("followers")
}

model Like {
  id  String    @default(uuid()) @id 
  userId String  @map("user_id")   
  productId String?  @map("product_id")   
  producerId String?  @map("producer_id")   
  teamId String?  @map("team_id")   
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at") 

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade) 
  product Product?  @relation(fields: [productId], references: [id])
  producer Producer?  @relation(fields: [producerId], references: [id])
  team BuyingTeam?  @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("likes")
}

model Invite {
  id  String    @default(uuid()) @id 
  teamId String  @map("team_id")
  status TeamStatus @default(PENDING) 
  phone String 
  token String?
  userId String  @map("user_id") 
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at") 

  team BuyingTeam  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade) 
  
  @@map("invites")
}

model Order {
  id  String  @default(uuid()) @id 
  teamId String  @map("team_id")
  status OrderStatus @default(PENDING) 
  minimumTreshold Int @map("minimum_treshold")
  accumulatedAmount Int @map("accumulated_amount") @default(0)
  deadline DateTime @default(now())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at") 

  team BuyingTeam  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  basket Basket[]
  payments Payment[]
  notifications Notification[]
  
  @@map("orders")
}

model Basket {
  id  String  @default(uuid()) @id 
  orderId String @map("order_id")
  userId String  @map("user_id")
  productId String @map("product_id")
  quantity Int
  price Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at") 

  order Order  @relation(fields: [orderId], references: [id])
  product Product  @relation(fields: [productId], references: [id])
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade) 
  
  @@map("basket")
}

model Payment {
  id  String  @default(uuid()) @id 
  orderId String? @map("order_id")  
  userId String? @map("user_id") 
  amount Int
  paymentIntentId String @unique
  status PaymentStatus @default(PENDING) 
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at") 

  order Order?  @relation(fields: [orderId], references: [id])
  user User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("payments")
}

model Notification {
  id  String  @default(uuid()) @id 
  orderId String? @map("order_id")  
  userId String? @map("user_id") 
  teamId String? @map("team_id") 
  producerId  String? @map("producer_id") 
  title String?
  text String
  isRead Boolean @default(false) @map("is_read") 
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at") 

  order Order?  @relation(fields: [orderId], references: [id])
  user User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  team BuyingTeam?  @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model RecentlyViewed {
  id  String  @default(uuid()) @id  
  userId String @map("user_id") 
  teamId String? @map("team_id") 
  producerId  String? @map("producer_id") 
  productId String? @map("product_id")  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at") 
 
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  team BuyingTeam?  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  producer Producer?  @relation(fields: [producerId], references: [id])
  product Product?  @relation(fields: [productId], references: [id])

  @@map("recently_viewed")
}

enum OrderStatus {
  PENDING
  SUCCESSFUL
  FAILED  
}

enum Role {
  USER
  PRODUCER
  ADMIN
}

enum ProductStatus {
  OUT_OF_STOCK
  IN_STOCK
  RUNNING_LOW
}

enum TeamStatus {
  PENDING
  APPROVED
  REJECTED
  REMOVED
}

enum PaymentStatus {
  PENDING  
  INTENT_CREATED
  CAPTURED
}